# -*- coding: utf-8 -*-
"""Play_Tennis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17TI-5M_lLtgvPDdyt-7xlGwTTEwgrahE
"""

import pandas as pd
import tkinter as tk
from sklearn.metrics import accuracy_score as acs
from sklearn.model_selection import train_test_split as tts
from sklearn.linear_model import LogisticRegression as lr

df = pd.read_csv("https://raw.githubusercontent.com/shivjain123/Play_Tennis-CSV/master/PlayTennis.csv")

df.head()

#Converting DF into List
outlook_list = list(df["outlook"])
temp_list = list(df["temp"])
humidity_list = list(df["humidity"])
windy_list = list(df["windy"])
result_list = list(df["play"])

#For Converting Outlook into Integrs
outlook_int_list = list()

for r in range(len(outlook_list)):
  if outlook_list[r] == 'overcast':
    outlook_int_list.append(0)
  elif outlook_list[r] == 'rainy':
    outlook_int_list.append(1)
  else:
    outlook_int_list.append(2)

""" print(outlook_list)
print()
print(outlook_int_list) """

#For Converting Temp into Integers
temp_int_list = list()

for r in range(len(temp_list)):
  if temp_list[r] == 'cool':
    temp_int_list.append(0)
  elif temp_list[r] == 'hot':
    temp_int_list.append(1)
  else:
    temp_int_list.append(2)

""" print(temp_list)
print()
print(temp_int_list) """

# For Converting Humidity to Binary
humidity_binary_list = list()

for r in range(len(humidity_list)):
  if humidity_list[r] == 'high':
    humidity_binary_list.append(0)
  else:
    humidity_binary_list.append(1)

""" print(humidity_list)
print()
print(humidity_binary_list) """

#For Converting Windy into Binary
windy_binary_list = list()

for r in range(len(windy_list)):
  if windy_list[r] == True:
    windy_binary_list.append(1)
  else:
    windy_binary_list.append(0)

""" print(windy_list)
print()
print(windy_binary_list) """

#For Converting into Yes-No into Binary
yes_no_list = list()

for r in range(len(result_list)):
  if result_list[r] == "yes":
    yes_no_list.append(1)
  else:
    yes_no_list.append(0)

weather_inf = pd.DataFrame([outlook_int_list, temp_int_list, humidity_binary_list, windy_binary_list])
weather_inf = weather_inf.transpose()

results = pd.DataFrame(yes_no_list)

weather_train, weather_test, results_train, results_test = tts(weather_inf, results, train_size = 0.8, random_state = 42)

model = lr(random_state = 0)

model.fit(weather_train, results_train)

y_pred_gnb = model.predict(weather_test)
acs_gnb = acs(results_test, y_pred_gnb)

print(f"The Accuracy Score from Navie Bayes Algorithm is {acs_gnb}.")

#tkinter GUI
root = tk.Tk()

canvas1 = tk.Canvas(root, width=500, height=300)
canvas1.pack()

#Outlook Label and Input Box
label1 = tk.Label(root, text=" Overall Weather (Please enter 0 for overcast, 1 for rainy and 2 for sunny): ")
canvas1.create_window(100, 100, window=label1)

entry1 = tk.Entry(root)
canvas1.create_window(355, 100, window=entry1)

# Temp Vote label and input box
label2 = tk.Label(root, text=' Temp (Please enter 0 for cool, 1 for hot and 2 for mild): ')
canvas1.create_window(100, 120, window=label2)

entry2 = tk.Entry(root)
canvas1.create_window(310, 120, window=entry2)

# Humidity label and input box
label3 = tk.Label(root, text=' Humidity (Please enter 0 for high and 1 for normal): ')
canvas1.create_window(100, 140, window=label3)

entry3 = tk.Entry(root)
canvas1.create_window(310, 140, window=entry3)

# Windy label and input box
label4 = tk.Label(root, text=' Windy (Please enter 0 for Not Windy and 1 for Windy): ')
canvas1.create_window(100, 160, window=label4)

entry4 = tk.Entry(root)
canvas1.create_window(310, 160, window=entry4)


def values():
 #global Open our 1st input variable
 outlook = int(entry1.get())
 #global Close our 2nd input variable
 temp = int(entry2.get())
 # global Open our 3rd input variable
 humidity = int(entry3.get())
 # global Open our 4rd input variable
 windy = int(entry4.get())
 prediction = model.predict([[outlook, temp, humidity, windy]])
 if prediction == 1:
   prediction = "The Weather is suitable for playing Tennis."
 else:
    prediction = "The weather is not suitable for playing Tennis."
 Prediction_result = ('The Prediction is : ', prediction)
 label_Prediction = tk.Label(root, text=Prediction_result, bg='orange')
 canvas1.create_window(200, 230, window=label_Prediction)


#Button to call the 'values' command above
button1 = tk.Button(root, text='Click to get a prediction for is it suitable for playing tennis or not :', command=values, bg='orange')
canvas1.create_window(200, 190, window=button1)

root.mainloop()
